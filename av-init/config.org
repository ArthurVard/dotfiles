#+TITLE: Org-mode configuration
#+OPTIONS: origin-url:[[https://github.com/hrs/dotfiles/blob/master/emacs/.emacs.d/configuration.org#publishing-and-task-management-with-org-mode][org-mote config section]]

* Publishing and task management with Org-mode
** Links
   [[https://pastebin.com/9Dgx4NM9][Rainer König]]
** Use package
#+BEGIN_SRC emacs-lisp
  (use-package org)
#+END_SRC

** Display preferences

I like to see an outline of pretty bullets instead of a list of asterisks.

#+BEGIN_SRC emacs-lisp
;(ensure-package-installed
; 'org-bullets
;)

;(use-package org-bullets
;    :init
;    (add-hook 'org-mode-hook 'org-bullets-mode))
#+END_SRC

I like seeing a little downward-pointing arrow instead of the usual ellipsis
(=...=) that org displays when there's stuff under a header.

#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis "⤵")
#+END_SRC

Use syntax highlighting in source blocks while editing.

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC

Make TAB act as if it were issued in a buffer of the language's major mode.

#+BEGIN_SRC emacs-lisp
  (setq org-src-tab-acts-natively t)
#+END_SRC

When editing a code snippet, use the current window rather than popping open a
new one (which shows the same information).

#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC

Quickly insert a block of elisp:

#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC

** Helper functions 
#+BEGIN_SRC emacs-lisp
   (defun concat-to-org-dir (filename)
     "Return the absolute address of an org file, given its relative name."
     (concat (file-name-as-directory org-directory) filename))

   (defun concat-to-orgzly-dir (filename)
     "Return the absolute address of an org file, given its relative name."
     (concat (file-name-as-directory orgzly-directory) filename))
#+END_SRC

** Global Variables and Settigns
#+BEGIN_SRC emacs-lisp
   ;; paths
   (setq org-directory "~/orgs")
   (setq orgzly-directory "~/orgs/orgzly")

   ;; 
  '(org-id-locations-file "~/orgs/.org-id-locations")

   ;; main files
   (setq org-inbox-file   (concat-to-org-dir    "inbox.org"))

   (setq org-index-file   (concat-to-orgzly-dir "index.org"   ))
   (setq org-mylearn-file (concat-to-orgzly-dir "mylearn.org" ))
   (setq org-mywork-file  (concat-to-orgzly-dir "mywork.org"  ))


  ;; Agenda files
   (setq org-agenda-files (list org-index-file org-mylearn-file org-mywork-file))

  ;; Archives
      ;(setq org-archive-location
       ;     (concat (concat-to-org-dir "archive.org") "::* From %s"))

    ;; YYYY-MM-filename.org
     (setq org-archive-location
       (concat org-directory
          (concat "/archive/" (format-time-string "%Y-%m" (current-time))) "-%s::* "(format-time-string "%Y-%m-%d" (current-time)))
       )

  ;;    (setq org-archive-location
    ;;        (concat org-directory  "/archive/%s::datetree/"))


#+END_SRC

Refiling
#+BEGIN_SRC emacs-lisp
  (setq org-refile-use-outline-path 'file)
  (setq org-outline-path-complete-in-steps nil)

  ;; a new parent that you create on-the-fly
  (setq org-refile-allow-creating-parent-nodes 'confirm)

  (setq org-refile-targets
      '((nil :maxlevel . 3)
        (org-agenda-files :maxlevel . 3)))

#+END_SRC

** Task and org-capture management

I use [[http://agiletortoise.com/drafts/][Drafts]] to create new tasks, format them according to a template, and
append them to an "inbox.org" file in my Dropbox. This function lets me import
them easily from that inbox file to my index.

#+BEGIN_SRC emacs-lisp
  (defun hrs/copy-tasks-from-inbox ()
    (when (file-exists-p org-inbox-file)
      (save-excursion
        (find-file org-index-file)
        (goto-char (point-max))
        (insert-file-contents org-inbox-file)
        (delete-file org-inbox-file))))
#+END_SRC


Hitting =C-c C-x C-s= will mark a todo as done and move it to an appropriate
place in the archive.

#+BEGIN_SRC emacs-lisp
  (defun hrs/mark-done-and-archive ()
    "Mark the state of an org-mode item as DONE and archive it."
    (interactive)
    (org-todo 'done)
    (org-archive-subtree))

  (define-key org-mode-map (kbd "C-c C-x C-s") 'hrs/mark-done-and-archive)
#+END_SRC

Record the time that a todo was archived.

#+BEGIN_SRC emacs-lisp
  (setq org-log-done 'time)
#+END_SRC

**** Capturing tasks

Define a few common tasks as capture templates. Specifically, I frequently:

- Record ideas for future blog posts in =~/documents/notes/blog-ideas.org=,
- Maintain a todo list in =~/documents/org/index.org=.
- Convert emails into todos to maintain an empty inbox.


#+BEGIN_SRC emacs-lisp

  (ensure-package-installed
 'deft
)

(require 'deft)

(setq deft-extensions '("txt" "tex" "org"))
(setq deft-directory org-directory)

  (setq org-capture-templates
        '( 
          ("p" "Private Tempaltes")
          ("pb" "Blog idea"
           entry
           (file "~/orgs/notes/blog-ideas.org")
           "* %?\n"
           )
          ("pe" "Email" entry
           (file+headline org-index-file "Index")
           "* TODO %?\n\n%a\n\n")

          ("pf" "Finished book"
           table-line (file "~/orgs/notes/books-read.org")
           "| %^{Title} | %^{Author} | %u |")

          ("pr" "Reading"
           checkitem
           (file "~/orgs/notes/to-read.org"))

          ("ps" "Subscribe to an RSS feed"
           plain
           (file "~/orgs/rss/urls")
           "%^{Feed URL} \"~%^{Feed name}\"")

          ("pt" "Todo"
           entry
           (file+headline org-index-file "Index")
           "* TODO %?\n")


          ("t" "Todo"
           entry
           (file+headline org-index-file "Index")
           "* TODO %?\n")
          ("g" "Code trick from chat"
           entry
           (file "~/orgs/code/gists.org")
           "* %^{Gist Title} \n#+BEGIN_SRC haskell \n%?  \n#+END_SRC \n :CODEGIST: \n  - Added: %U \n :END:")

          )
        )
#+END_SRC

When I'm starting an Org capture template I'd like to begin in insert mode. I'm
opening it up in order to start typing something, so this skips a step.

#+BEGIN_SRC emacs-lisp
;  (add-hook 'org-capture-mode-hook 'evil-insert-state)
#+END_SRC


**** Keybindings

Bind a few handy keys.

#+BEGIN_SRC emacs-lisp
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-ca" 'org-agenda)
  (define-key global-map (kbd "<f6>") 'org-capture)
#+END_SRC

Hit =C-c i= to quickly open up my todo list.

#+BEGIN_SRC emacs-lisp
  (defun hrs/open-index-file ()
    "Open the master org TODO list."
    (interactive)
    (hrs/copy-tasks-from-inbox)
    (find-file org-index-file)
    (flycheck-mode -1)
    (end-of-buffer))

  (global-set-key (kbd "C-c i") 'hrs/open-index-file)
#+END_SRC

Hit =M-n= to quickly open up a capture template for a new todo.

#+BEGIN_SRC emacs-lisp
  (defun org-capture-todo ()
    (interactive)
    (org-capture :keys "t"))

  (global-set-key (kbd "M-n") 'org-capture-todo)
  (add-hook 'gfm-mode-hook
            (lambda () (local-set-key (kbd "M-n") 'org-capture-todo)))
  (add-hook 'haskell-mode-hook
            (lambda () (local-set-key (kbd "M-n") 'org-capture-todo)))
#+END_SRC

** Exporting

Allow export to markdown and beamer (for presentations).

#+BEGIN_SRC emacs-lisp
  (require 'ox-md)
  (require 'ox-beamer)
#+END_SRC

Allow =babel= to evaluate Emacs lisp, Ruby, dot, or Gnuplot code.

#+BEGIN_SRC emacs-lisp
(ensure-package-installed
 'gnuplot
 'graphviz-dot-mode 
)

(use-package gnuplot)

    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (ruby . t)
       (dot . t)
       (gnuplot . t)))
#+END_SRC

Don't ask before evaluating code blocks.

#+BEGIN_SRC emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+END_SRC

Associate the "dot" language with the =graphviz-dot= major mode.

#+BEGIN_SRC emacs-lisp

  (use-package graphviz-dot-mode)
  (add-to-list 'org-src-lang-modes '("dot" . graphviz-dot))
#+END_SRC

Translate regular ol' straight quotes to typographically-correct curly quotes
when exporting.

#+BEGIN_SRC emacs-lisp
  (setq org-export-with-smart-quotes t)
#+END_SRC

**** Exporting to HTML

Don't include a footer with my contact and publishing information at the bottom
of every exported HTML document.

#+BEGIN_SRC emacs-lisp
  (setq org-html-postamble nil)
#+END_SRC

Exporting to HTML and opening the results triggers =/usr/bin/sensible-browser=,
which checks the =$BROWSER= environment variable to choose the right browser.
I'd like to always use Firefox, so:

#+BEGIN_SRC emacs-lisp
  (setq browse-url-browser-function 'browse-url-generic
        browse-url-generic-program "firefox")

  (setenv "BROWSER" "firefox")
#+END_SRC

**** Exporting to PDF

I want to produce PDFs with syntax highlighting in the code. The best way to do
that seems to be with the =minted= package, but that package shells out to
=pygments= to do the actual work. =pdflatex= usually disallows shell commands;
this enables that.

#+BEGIN_SRC emacs-lisp
  (setq org-latex-pdf-process
        '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+END_SRC

Include the =minted= package in all of my LaTeX exports.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-latex-packages-alist '("" "minted"))
  (setq org-latex-listings 'minted)
#+END_SRC

**** Exporting projects

